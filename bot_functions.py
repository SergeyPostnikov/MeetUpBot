import datetime as dt
import db_functions

from globals import (
bot, telebot, ACCESS_DUE_TIME, INPUT_DUE_TIME, payload, date_now, date_end, pay_token, markup_main_menu, markup_user,
markup_speaker, markup_registration, markup_faq, markup_report_true, markup_report_false, markup_form, markup_communicate,
markup_report, markup_admin_menu, markup_enroll_meetup, markup_start, markup_enter_meetup, markup_start_report,
markup_next_question, markup_start_admin_menu, markup_del_report, markup_edit_meetup, time_report, markup_recording_time,
markup_choose_speaker, markup_add_speaker, markup_mail, markup_send_mail,
)
from telebot.util import quick_markup
from telebot.types import LabeledPrice, ShippingOption
from telegram_bot_calendar.base import DAY
from telegram_bot_calendar.detailed import DetailedTelegramCalendar


admin = [933137433, ]

shipping_options = [
    ShippingOption(id='instant', title='WorldWide Teleporter').add_price(LabeledPrice('Teleporter', 1000)),
    ShippingOption(id='pickup', title='Local pickup').add_price(LabeledPrice('Pickup', 300))]


class WMonthTelegramCalendar(DetailedTelegramCalendar):
    first_step = DAY


def get_calls(var, func):
    calls = {}
    for id in var:
        calls.update({f'{id}': func})
    return calls


def get_report(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    user['sheet'] = 0
    reports = db_functions.get_reports()
    for report in reports:
        if report.id == int(call):
            text = f'–î–æ–∫–ª–∞–¥ {report.theme}\n---\n' \
                   f'{report.start_time} - {report.end_time}\n---\n' \
                   f'–í–µ–¥–µ—Ç –¥–æ–∫–ª–∞–¥ - {report.speaker.name}\n---\n'
            user['report'] = report.id
            markup = markup_report_true
            if user['info'] == 1:
                markup = markup_start_report
            elif user['group'] == 'admin':
                markup = markup_del_report
            bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                  text=text, reply_markup=markup)


def get_users(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    user['sheet'] = 0
    users = db_functions.get_meetup_users(message.chat.id)
    for us in users:
        if us.id == int(call):
            text = f'{us.name}\n---\n' \
                   f'{us.job}\n---\n' \
                   f'{us.about}\n---\n'
            user['text'] = us.tg_name
            bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                  text=text, reply_markup=markup_communicate)


def get_markup(buttons, row_width=1):
    return quick_markup(buttons, row_width=row_width)


# Start========================================================================================
def start_bot(message: telebot.types.Message):
    tg_name = message.from_user.username
    msg = bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {tg_name} üòâ')
    access_due = dt.datetime.now() + dt.timedelta(0, ACCESS_DUE_TIME)
    payload[message.chat.id] = {
        'callback': None,  # current callback button
        'last_msg': [],  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ø–æ–¥—á–∏—Å—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫) -- –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞
        'callback_source': [],  # –µ—Å–ª–∏ –∑–∞–¥–∞–Ω, –∫–æ–ª–±—ç–∫ –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        'code_speakers': [],
        'code_users': [],
        'code_meetups': [],
        'code_reports': [],
        'status': None,
        'meetup': None,
        'access_due': access_due,  # –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        'form': None,
        'group': None,
        'name': None,
        'job': None,
        'date': None,
        'time': [],
        'donate': None,
        'msg_id_1': None,
        'msg_id_2': None,
        'tg_name': tg_name,
        'tg_id': message.chat.id,
        'text': None,
        'info': None,
        'report': None,
        'report_id': None,
        'sheet': 0,
        'step_due': None,  # —Å—Ä–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ callback —Ñ—É–Ω–∫—Ü–∏—è—Ö)
    }
    payload[message.chat.id]['msg_id_1'] = msg.id
    if message.chat.id in admin:
        markup = markup_start_admin_menu
        payload[message.chat.id]['group'] = 'admin'
    else:
        markup = markup_start
    msg = bot.send_message(message.chat.id, f'–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç MeetUpBot', reply_markup=markup)
    payload[message.chat.id]['msg_id_2'] = msg.id


def get_registration(message: telebot.types.Message, call, step=0):
    user = payload[message.chat.id]
    buttons = {}
    member = db_functions.search_user(user['tg_name'])
    if not member:
        if step == 0:
            msg = bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                  text=f'–í–≤–µ–¥–∏—Ç–µ –∏–º—è')
            user['callback_source'] = [msg.id]
            bot.register_next_step_handler(message, get_registration, call, 1)
            user['step_due'] = dt.datetime.now() + dt.timedelta(0, INPUT_DUE_TIME)
        elif user['step_due'] < dt.datetime.now():
            bot.send_message(message.chat.id, '–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫–ª–æ. –ù–∞–∂–º–∏—Ç–µ /start')
            return
        elif step == 1:
            user['name'] = message.text
            bot.delete_message(message.chat.id, message.message_id)
            bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                  text=f'–í–≤–µ–¥–µ–Ω–Ω–æ–µ –∏–º—è {user["name"]}', reply_markup=markup_start)
            db_functions.add_new_user(user['name'], message.from_user.username, message.chat.id)
        user['callback_source'] = []
    else:
        meetups = db_functions.search_meetup(date_now)
        for meetup in meetups:
            name = meetup.theme
            date = meetup.date
            user['code_meetups'].append(str(meetup.id))
            buttons.update({f'{name} - {date}': {'callback_data': meetup.id}})
        markup = get_markup(buttons)
        bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text=f'–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=markup)


def get_meetup(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    meetups = db_functions.search_meetup(date_now)
    user['sheet'] = 0
    for meetup in meetups:
        if str(meetup.id) == call:
            text = f'{meetup.theme}\n---\n' \
                   f'{meetup.date}\n---\n' \
                   f'{meetup.description}\n---\n'
            status = db_functions.get_status(message.chat.id, meetup)
            if user['status'] == 'mail':
                markup = markup_send_mail
            elif user['group'] == 'admin':
                markup = markup_edit_meetup
            elif status in ['1', '2'] and meetup.date == date_now:
                markup = markup_enter_meetup
                user['group'] = status
            elif not status:
                markup = markup_enroll_meetup
            else:
                markup = markup_start
            bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                  text=text, reply_markup=markup)
            user['meetup'] = call
    user['code_meetups'] = []


def get_enroll_meetup(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    meetup_theme, meetup_date = db_functions.enroll_meetup(user['meetup'], message.chat.id)
    text = f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ {meetup_theme} - {meetup_date}'
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                      text=text, reply_markup=markup_start)


def check_user_in_cache(msg: telebot.types.Message):
    """–ø—Ä–æ–≤–µ—Ä—è—Ç –Ω–∞–ª–∏—á–∏–µ user –≤ –∫—ç—à–µ
    —ç—Ç–æ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–ª—É—á–∏–ª—Å—è —Å–±–æ–π/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    –∏ –∫—ç—à –ø—Ä–∏–∫–∞–∑–∞–ª –¥–æ–ª–≥–æ –∂–∏—Ç—å. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ
    –ø—É—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ """
    user = payload.get(msg.chat.id)
    if not user:
        bot.send_message(msg.chat.id, '–£–ø—Å. –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n'
                                      '–ù–∞–∂–º–∏—Ç–µ /start')
        return None
    else:
        return user


def main_menu(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    user['sheet'] = 0
    user['callback_source'] = []
    bot.clear_step_handler(message)
    if user['group'] == '1':
        markup = markup_user
    elif user['group'] == '2':
        markup = markup_speaker
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é —á—Ç–æ –º–æ–≥—É ü•≥', reply_markup=markup)


#FAQ=======================================================================================
def get_faq(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text='FAQ ', reply_markup=markup_faq)


def get_faq_question(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text='–û–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', reply_markup=markup_main_menu)


def get_faq_communicate(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text='–û–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—â–∞—Ç—å—Å—è', reply_markup=markup_main_menu)


def get_faq_start_report(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text='–û–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å/ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ–∫–ª–∞–¥ ', reply_markup=markup_main_menu)


# Communicate========================================================================================
def get_communicate(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    member = db_functions.search_user(user['tg_name'])[0]
    if not member.job:
        bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text='–ê–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ üòù', reply_markup=markup_form)
    else:
        buttons = {}
        users = db_functions.get_meetup_users(message.chat.id)
        for us in users[user['sheet']:user['sheet'] + 2]:
            name = us.name
            user['code_users'].append(str(us.id))
            job = us.job
            buttons.update({f'{name} - {job}': {'callback_data': us.id}})
        user['sheet'] += 2
        if user['sheet'] < len(users):
            buttons.update({'–ï—â–µ –∞–Ω–∫–µ—Ç—ã': {'callback_data': 'communicate'}})
        else:
            user['sheet'] = 0
        buttons.update({'–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é': {'callback_data': 'main_menu'}})
        markup = get_markup(buttons)
        bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text=f'–ê–Ω–∫–µ—Ç—ã –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è', reply_markup=markup)


def fill_out_a_form(message: telebot.types.Message, order_id, step=0):
    user = payload[message.chat.id]
    if step == 0:
        msg = bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                    text='–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é', reply_markup=markup_main_menu)
        user['callback_source'] = [msg.id]
        bot.register_next_step_handler(message, fill_out_a_form, order_id, 1)
        user['step_due'] = dt.datetime.now() + dt.timedelta(0, INPUT_DUE_TIME)
    elif user['step_due'] < dt.datetime.now():
        bot.send_message(message.chat.id, '–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫–ª–æ. –ù–∞–∂–º–∏—Ç–µ /start')
        return
    elif step == 1:
        user['job'] = message.text
        bot.delete_message(message.chat.id, message.message_id)
        msg = bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text=f'–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å', reply_markup=markup_main_menu)
        user['callback_source'] = [msg.id]
        bot.register_next_step_handler(message, fill_out_a_form, order_id, 2)
        user['step_due'] = dt.datetime.now() + dt.timedelta(0, INPUT_DUE_TIME)
    elif step == 2:
        user['info'] = message.text
        bot.delete_message(message.chat.id, message.message_id)
        bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text=f'–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ ü•≥', reply_markup=markup_main_menu)
        db_functions.add_user_info(user['tg_name'], user['job'], user['info'])
        user['info'] = []
    user['callback_source'] = []

def write_in_private(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=f'–ñ–º—è–∫–Ω–∏ –Ω–∞ @{user["text"]}', reply_markup=markup_main_menu)


#Ask_question======================================================================================
def ask_question(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    report = db_functions.get_current_report()
    if not report:
        bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text='–î–æ–∫–ª–∞–¥–∞ –Ω–µ—Ç üòû', reply_markup=markup_report_false)
    else:
        text = f'–ò–¥–µ—Ç –¥–æ–∫–ª–∞–¥ - {report.theme}\n---\n' \
               f'{report.start_time} - {report.end_time}\n---\n'\
               f'–ß–∏—Ç–∞–µ—Ç –¥–æ–∫–ª–∞–¥ -  {report.speaker.name}\n---\n'
        bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text=text, reply_markup=markup_report_true)

def ask_question_a_speaker(message: telebot.types.Message, order_id, step=0):
    user = payload[message.chat.id]
    if step == 0:
        msg = bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text='–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å', reply_markup=markup_main_menu)
        user['callback_source'] = [msg.id]
        bot.register_next_step_handler(message, ask_question_a_speaker, order_id, 1)
        user['step_due'] = dt.datetime.now() + dt.timedelta(0, INPUT_DUE_TIME)
    elif user['step_due'] < dt.datetime.now():
        bot.send_message(message.chat.id, '–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫–ª–æ. –ù–∞–∂–º–∏—Ç–µ /start')
        return
    elif step == 1:
        user['text'] = message.text
        bot.delete_message(message.chat.id, message.message_id)
        bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                    text=f'–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω', reply_markup=markup_main_menu)
        db_functions.send_feedback(message.chat.id, message.text, user['report'])
    user['callback_source'] = []


def get_speaker_buttons(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    buttons = {}
    reports = db_functions.get_reports()
    for report in reports[user['sheet']:user['sheet']+2]:
        name = report.speaker.name
        user['code_speakers'].append(str(report.id))
        theme = report.theme
        buttons.update({f'{name} - {theme}': {'callback_data': report.id}})
    user['sheet'] += 2
    if user['sheet'] < len(reports):
        buttons.update({'–ï—â–µ –¥–æ–∫–ª–∞–¥—ã': {'callback_data': 'choice_speaker'}})
    else:
        user['sheet'] = 0
    buttons.update({'–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é': {'callback_data': 'main_menu'}})
    markup = get_markup(buttons)
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫–ª–∞–¥', reply_markup=markup)


#Donate========================================================================================
def get_donate(message: telebot.types.Message, order_id, step=0):
    user = payload[message.chat.id]
    if step == 0:
        msg = bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö', reply_markup=markup_main_menu)
        user['callback_source'] = [msg.id]
        bot.register_next_step_handler(message, get_donate, order_id, 1)
        user['step_due'] = dt.datetime.now() + dt.timedelta(0, INPUT_DUE_TIME)
    elif user['step_due'] < dt.datetime.now():
        bot.send_message(message.chat.id, '–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫–ª–æ. –ù–∞–∂–º–∏—Ç–µ /start')
        return
    elif step == 1:
        try:
            user['donate'] = int(message.text)
            bot.delete_message(message.chat.id, message.message_id)
            bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                        text=f'–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ {user["donate"]}', reply_markup=markup_registration)
        except ValueError:
            bot.delete_message(message.chat.id, message.message_id)
            bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                        text=f'–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', reply_markup=markup_main_menu)
    user['callback_source'] = []


def get_registration_pay(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    price = LabeledPrice(label='–î–æ–Ω–∞—Ç–∏–∫ –±—Ä–∞—Ç—é–Ω—è–º', amount=int(user['donate']) * 100)

    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text="–°–æ –º–Ω–æ–π –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–∞—Ä—Ç—ã, –Ω–∏–∫–∞–∫–∏–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞."
                     " –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: `4242 4242 4242 4242`"
                     "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É /start"
                     "\n\n–≠—Ç–æ –≤–∞—à –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç:", parse_mode='Markdown')
    bot.send_invoice(
        message.chat.id,
        title='–î–æ–Ω–∞—Ç–∏–∫ –±—Ä–∞—Ç—é–Ω—è–º',
        description='–û–ø–ª–∞—Ç–∞ –±—Ä–∞—Ç—é–Ω—è–º',
        provider_token=pay_token,
        invoice_payload='–û–ø–ª–∞—Ç–∞ –±—Ä–∞—Ç—é–Ω—è–º',
        currency='rub',
        prices=[price],
        photo_url='https://mirpozitiva.ru/wp-content/uploads/2019/11/1542866820_0019.jpg',
        photo_height=512,
        photo_width=512,
        photo_size=512,
        is_flexible=False,  # True If you need to set up Shipping Fee
        start_parameter='test-invoice-payload')


 # speaker button=========================================================================

def start_report(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    buttons = {}
    reports = db_functions.get_reports(message.chat.id)
    if reports:
        for report in reports[user['sheet']:user['sheet'] + 2]:
            name = report.speaker.name
            user['code_speakers'].append(str(report.id))
            theme = report.theme
            buttons.update({f'{name} - {theme}': {'callback_data': report.id}})
        user['sheet'] += 2
        if user['sheet'] < len(reports):
            buttons.update({'–ï—â–µ –¥–æ–∫–ª–∞–¥—ã': {'callback_data': 'choice_speaker'}})
        else:
            user['sheet'] = 0
        buttons.update({'–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é': {'callback_data': 'main_menu'}})
        markup = get_markup(buttons)
        user['info'] = 1

        bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫–ª–∞–¥', reply_markup=markup)
    else:
        bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text=f'–ê–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤ –Ω–µ—Ç', reply_markup=markup_main_menu)


def finished_report(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    db_functions.set_finished(user['report'])
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=f'–î–æ–∫–ª–∞–¥ –∑–∞–∫–æ–Ω—á–µ–Ω\n'
                              , reply_markup=markup_main_menu)


def get_questions_asked(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    question = db_functions.get_current_question(user['report'])

    if question:
        user['info'] = question.id
        bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text=f'–í–æ–ø—Ä–æ—Å –æ—Ç {question.member.name}\n'
                                   f'{question.text}'
                                  , reply_markup=markup_report)
    else:
        bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text=f'–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å'
                              , reply_markup=markup_main_menu)


def get_set_answered(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    db_functions.set_answered(user['info'])
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=f'–í–æ–ø—Ä–æ—Å –∑–∞–∫—Ä—ã—Ç\n'
                              , reply_markup=markup_next_question)


# ADMIN MENU=======================================================================
# ADMIN MENU=======================================================================
#meetup button=======================================================================
def start_admin_menu(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    user['sheet'] = 0
    user['time'] = []
    user['callback_source'] = []
    bot.clear_step_handler(message)
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Ö–æ–∑—è–∏–Ω!', reply_markup=markup_admin_menu)


def get_control_meetup(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    buttons = {}
    meetups = db_functions.search_meetup(date_now)
    if meetups:
        text = '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ'
        for meetup in meetups[user['sheet']:user['sheet']+2]:
            name = meetup.theme
            date = meetup.date
            user['code_meetups'].append(str(meetup.id))
            buttons.update({f'{name} - {date}': {'callback_data': meetup.id}})
        user['sheet'] += 2
        if user['sheet'] < len(meetups):
            buttons.update({'–ï—â–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è': {'callback_data': 'next_meetup'}})
        else:
            user['sheet'] = 0
        if user['status'] != 'mail':
            buttons.update({'–ù–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è': {'callback_data': 'new_meetup'}})
            text = '–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞'
        buttons.update({'–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é': {'callback_data': 'start_admin_menu'}})
        markup = get_markup(buttons)
        bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text=text, reply_markup=markup)


def get_new_meetup(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    calendar, step = WMonthTelegramCalendar(locale='ru', min_date=date_now, max_date=date_end).build()
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', reply_markup=calendar)


def add_meetup(message: telebot.types.Message, call, step=0):
    user = payload[message.chat.id]
    if step == 0:
        msg = bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text=f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', reply_markup=markup_start_admin_menu)
        user['callback_source'] = [msg.id]
        bot.register_next_step_handler(message, add_meetup, call, 1)
        user['step_due'] = dt.datetime.now() + dt.timedelta(0, INPUT_DUE_TIME)
    elif user['step_due'] < dt.datetime.now():
        bot.send_message(message.chat.id, '–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫–ª–æ. –ù–∞–∂–º–∏—Ç–µ /start')
        return
    elif step == 1:
        user['meetup'] = message.text
        bot.delete_message(message.chat.id, message.message_id)
        msg = bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text=f'–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è {message.text}\n'
                                   f'---\n'
                                   f'–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ ',
                                   reply_markup=markup_start_admin_menu)
        user['callback_source'] = [msg.id]
        bot.register_next_step_handler(message, add_meetup, call, 2)
        user['step_due'] = dt.datetime.now() + dt.timedelta(0, ACCESS_DUE_TIME)
    elif step == 2:
        bot.delete_message(message.chat.id, message.message_id)
        bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text=f'{user["meetup"]}\n --- \n {user["date"]}\n--- \n –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ',
                                   reply_markup=markup_start_admin_menu)
        db_functions.add_new_meetup(user['meetup'], user["date"], message.text)
    user['callback_source'] = []


def del_meetup(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    button = {'–ù–∞–∑–∞–¥': {'callback_data': 'control_meetup'}}
    markup = get_markup(button)
    db_functions.delete_meetup(user['meetup'])
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=f'–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ',
                          reply_markup=markup)


def edit_meetup(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    buttons = {}
    reports = db_functions.search_reports_for_id(user['meetup'])
    if reports:
        for report in reports[user['sheet']:user['sheet']+2]:
            theme = report.theme
            start_time = report.start_time
            end_time = report.end_time
            name = report.speaker.name
            user['code_reports'].append(str(report.id))
            buttons.update({f'{theme} {str(start_time)[:5]} - {str(end_time)[:5]} {name}': {'callback_data': report.id}})
        user['sheet'] += 2
        if user['sheet'] < len(reports):
            buttons.update({'–ï—â–µ –¥–æ–∫–ª–∞–¥—ã': {'callback_data': 'next_report'}})
        else:
            user['sheet'] = 0
    buttons.update({'–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫–ª–∞–¥': {'callback_data': 'new_report'}})
    buttons.update({'–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ': {'callback_data': 'del_meetup'}})
    buttons.update({'–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é': {'callback_data': 'start_admin_menu'}})
    markup = get_markup(buttons)
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫–ª–∞–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π', reply_markup=markup)


def get_new_report(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    buttons = {}
    speakers = db_functions.search_speakers_for_meetup_id(user['meetup'])
    if speakers:
        for speaker in speakers:
            name = speaker.member.name
            job = speaker.member.job
            user['code_speakers'].append(str(speaker.member.id))
            buttons.update({f'{name} {job}': {'callback_data': speaker.member.id}})
        user['sheet'] += 2
        if user['sheet'] < len(speakers):
            buttons.update({'–ï—â–µ —Å–ø–∏–∫–µ—Ä—ã': {'callback_data': 'next_speaker'}})
        else:
            user['sheet'] = 0
    buttons.update({'–î–æ–±–∞–≤–∏—Ç—å —Å–ø–∏–∫–µ—Ä–∞': {'callback_data': 'new_speaker'}})
    buttons.update({'–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é': {'callback_data': 'start_admin_menu'}})
    markup = get_markup(buttons)
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=f'–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏–∫–µ—Ä–∞', reply_markup=markup)


def get_speaker(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    user['sheet'] = 0
    speakers = db_functions.search_speakers_for_meetup_id(user['meetup'])
    for speaker in speakers:
        if speaker.member.id == int(call):
            text = f'{speaker.member.name}\n---\n' \
                   f'{speaker.member.job}\n---\n' \
                   f'{speaker.member.about}\n---\n'
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=text, reply_markup=markup_choose_speaker)
    user['status'] = call


def add_new_speaker(message: telebot.types.Message, call, step=0):
    user = payload[message.chat.id]
    if step == 0:
        msg = bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                    text=f'–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', reply_markup=markup_start_admin_menu)
        user['callback_source'] = [msg.id]
        bot.register_next_step_handler(message, add_new_speaker, call, 1)
        user['step_due'] = dt.datetime.now() + dt.timedelta(0, INPUT_DUE_TIME)
    elif user['step_due'] < dt.datetime.now():
        bot.send_message(message.chat.id, '–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫–ª–æ. –ù–∞–∂–º–∏—Ç–µ /start')
        return
    elif step == 1:
        member = db_functions.search_user(message.text)
        bot.delete_message(message.chat.id, message.message_id)
        if not member:
            bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                  text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', reply_markup=markup_add_speaker)
        else:
            bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                  text=f'–°–ø–∏–∫–µ—Ä {message.text} –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=markup_add_speaker)
            db_functions.add_speaker(user['meetup'], member[0])
    user['callback_source'] = []


def get_recording_time(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    buttons = {}
    if not user['time']:
        buttons_time = time_report[0:-1]
    else:
        buttons_time = [x for x in time_report if x > user['time'][0]]
    for time in buttons_time:
        user['last_msg'].append(time)
        buttons.update({time: {'callback_data': time}})
    buttons.update({'–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é': {'callback_data': 'start_admin_menu'}})
    markup = get_markup(buttons, 4)
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=f'–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è', reply_markup=markup)


def add_report(message: telebot.types.Message, call, step=0):
    user = payload[message.chat.id]
    if step == 0:
        if not user['time']:
            msg = bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                  text=f'–ù–∞—á–∞–ª–æ –¥–æ–∫–ª–∞–¥–∞ - {call}', reply_markup=markup_recording_time)
            user['time'].append(call)
        else:
            msg = bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                  text=f'–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è {user["time"][0]} - {call}.\n--- \n'
                                       f'–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫–ª–∞–¥–∞', reply_markup=markup_start_admin_menu)
            user['time'].append(call)
        user['callback_source'] = [msg.id]
        bot.register_next_step_handler(message, add_report, call, 1)
        user['step_due'] = dt.datetime.now() + dt.timedelta(0, INPUT_DUE_TIME)
    elif user['step_due'] < dt.datetime.now():
        bot.send_message(message.chat.id, '–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫–ª–æ. –ù–∞–∂–º–∏—Ç–µ /start')
        return
    elif step == 1:
        bot.delete_message(message.chat.id, message.message_id)
        db_functions.add_report(user['meetup'], message.text, user['time'][0], user['time'][1], user['status'])
        bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text=f'–î–æ–∫–ª–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω', reply_markup=markup_edit_meetup)
    user['callback_source'] = []


def del_report(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    button = {'–ù–∞–∑–∞–¥': {'callback_data': 'edit_meetup'}}
    markup = get_markup(button)
    db_functions.delete_report(user['report'])
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=f'–î–æ–∫–ª–∞–¥ —É–¥–∞–ª–µ–Ω', reply_markup=markup)


def del_speaker(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    button = {'–ù–∞–∑–∞–¥': {'callback_data': 'new_report'}}
    markup = get_markup(button)
    db_functions.del_speaker(user['meetup'], user['status'])
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=f'–°–ø–∏–∫–µ—Ä —É–¥–∞–ª–µ–Ω', reply_markup=markup)


def prepare_mail(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    user['status'] = 'mail'
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=f'–î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', reply_markup=markup_mail)


def send_mail(message: telebot.types.Message, call, step=0):
    user = payload[message.chat.id]
    if step == 0:
        msg = bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                    text=f'–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏', reply_markup=markup_start_admin_menu)
        user['callback_source'] = [msg.id]
        bot.register_next_step_handler(message, send_mail, call, 1)
        user['step_due'] = dt.datetime.now() + dt.timedelta(0, INPUT_DUE_TIME)
    elif user['step_due'] < dt.datetime.now():
        bot.send_message(message.chat.id, '–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫–ª–æ. –ù–∞–∂–º–∏—Ç–µ /start')
        return
    elif step == 1:
        bot.delete_message(message.chat.id, message.message_id)
        members = db_functions.search_all_user(user['meetup'])
        if members:
            text = '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞'
            for member in members:
                bot.send_message(member.tg_id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {member.name}!\n---\n'
                                                  f'–í–∞–º –ø—Ä–∏—à–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∞\n---\n')
                bot.send_message(member.tg_id, f'{message.text}\n---\n'
                                                  f'–î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start')
        else:
            text = '–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
        bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text=text, reply_markup=markup_start_admin_menu)
    user['callback_source'] = []


def select_date_statistic(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    user['status'] = 'statistic'
    calendar, step = WMonthTelegramCalendar(locale='ru', min_date=date_now, max_date=date_end).build()
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=f'–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', reply_markup=calendar)


def get_statistic(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    donates = db_functions.get_statistic_donate(user['date'])
    if donates:
        sum = 0
        for donate in donates:
            sum += donate.donate_sum
        text = f'–°—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞ {sum}'
    else:
        text = f'–°–æ–±—ã—Ç–∏–µ –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text=text, reply_markup=markup_start_admin_menu)
