import datetime as dt


from globals import (
bot, telebot, ACCESS_DUE_TIME, INPUT_DUE_TIME, payload, date_now, date_end, pay_token, markup_main_menu, markup_user,
markup_speaker, markup_registration, markup_faq)
from telebot.util import quick_markup
from telebot.types import LabeledPrice, ShippingOption
from telegram_bot_calendar.base import DAY
from telegram_bot_calendar.detailed import DetailedTelegramCalendar


shipping_options = [
    ShippingOption(id='instant', title='WorldWide Teleporter').add_price(LabeledPrice('Teleporter', 1000)),
    ShippingOption(id='pickup', title='Local pickup').add_price(LabeledPrice('Pickup', 300))]


class WMonthTelegramCalendar(DetailedTelegramCalendar):
    first_step = DAY


def start_bot(message: telebot.types.Message):
    tg_name = message.from_user.username
    msg = bot.send_message(message.chat.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.username} üòâ')
    access_due = dt.datetime.now() + dt.timedelta(0, ACCESS_DUE_TIME)
    user_group = 1
    payload[message.chat.id] = {
        'callback': None,  # current callback button
        'last_msg': [],  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞ –æ–¥–∏–Ω —Ä–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –ø–æ–¥—á–∏—Å—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫) -- –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞
        'callback_source': [],  # –µ—Å–ª–∏ –∑–∞–¥–∞–Ω, –∫–æ–ª–±—ç–∫ –∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Å —ç—Ç–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        'access_due': access_due,  # –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        'name': None,
        'date': None,
        'time': None,
        'donate': None,
        'msg_id_1': None,
        'msg_id_2': None,
        'tg_name': tg_name,
        'tg_id': message.chat.id,
        'text': None,
        'phone': None,
        'step_due': None,  # —Å—Ä–æ–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤ callback —Ñ—É–Ω–∫—Ü–∏—è—Ö)
    }
    payload[message.chat.id]['msg_id_1'] = msg.id
    if user_group == 1:
        markup = markup_user
    elif user_group == 2:
        markup = markup_speaker
    msg = bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é —á—Ç–æ –º–æ–≥—É ü•≥',
                           reply_markup=markup)
    payload[message.chat.id]['msg_id_2'] = msg.id


def check_user_in_cache(msg: telebot.types.Message):
    """–ø—Ä–æ–≤–µ—Ä—è—Ç –Ω–∞–ª–∏—á–∏–µ user –≤ –∫—ç—à–µ
    —ç—Ç–æ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —Å–ª—É—á–∏–ª—Å—è —Å–±–æ–π/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    –∏ –∫—ç—à –ø—Ä–∏–∫–∞–∑–∞–ª –¥–æ–ª–≥–æ –∂–∏—Ç—å. –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—á–∞–ª–æ
    –ø—É—Ç–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ """
    user = payload.get(msg.chat.id)
    if not user:
        bot.send_message(msg.chat.id, '–£–ø—Å. –ß—Ç–æ —Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.\n'
                                      '–ù–∞–∂–º–∏—Ç–µ /start')
        return None
    else:
        return user


def main_menu(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    user_group = 1
    if user_group == 1:
        markup = markup_user
    elif user_group == 2:
        markup = markup_speaker
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é —á—Ç–æ –º–æ–≥—É ü•≥', reply_markup=markup)


def get_faq(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text='FAQ ', reply_markup=markup_faq)


def get_faq_question(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text='–û–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', reply_markup=markup_main_menu)


def get_faq_communicate(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text='–û–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—â–∞—Ç—å—Å—è', reply_markup=markup_main_menu)


def get_faq_start_report(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text='–û–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å/ –∑–∞–∫–æ–Ω—á–∏—Ç—å –¥–æ–∫–ª–∞–¥ ', reply_markup=markup_main_menu)

def get_communicate(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text='–ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç üòù', reply_markup=markup_main_menu)

def ask_question(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text='–ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç üòû', reply_markup=markup_main_menu)

def get_donate(message: telebot.types.Message, order_id, step=0):
    user = payload[message.chat.id]
    if step == 0:
        msg = bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                              text='–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–Ω–∞—Ç–∞ –≤ —Ä—É–±–ª—è—Ö', reply_markup=markup_main_menu)
        user['callback_source'] = [msg.id]
        bot.register_next_step_handler(message, get_donate, order_id, 1)
        user['step_due'] = dt.datetime.now() + dt.timedelta(0, INPUT_DUE_TIME)
    elif user['step_due'] < dt.datetime.now():
        bot.send_message(message.chat.id, '–í—Ä–µ–º—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å—Ç–µ–∫–ª–æ. –ù–∞–∂–º–∏—Ç–µ /start')
        return
    elif step == 1:
        try:
            user['donate'] = int(message.text)
            bot.delete_message(message.chat.id, message.message_id)
            bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                        text=f'–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ {user["donate"]}', reply_markup=markup_registration)
        except ValueError:
            bot.delete_message(message.chat.id, message.message_id)
            bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                                        text=f'–í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞', reply_markup=markup_main_menu)
    user['callback_source'] = []


def get_registration_pay(message: telebot.types.Message, call):
    user = payload[message.chat.id]
    price = LabeledPrice(label='–î–æ–Ω–∞—Ç–∏–∫ –±—Ä–∞—Ç—é–Ω—è–º', amount=int(user['donate']) * 100)
    bot.edit_message_text(chat_id=message.chat.id, message_id=user['msg_id_2'],
                          text="–°–æ –º–Ω–æ–π –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ –∫–∞—Ä—Ç—ã, –Ω–∏–∫–∞–∫–∏–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã —Å –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞."
                     " –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã: `4242 4242 4242 4242`"
                     "\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É /start"
                     "\n\n–≠—Ç–æ –≤–∞—à –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç:", parse_mode='Markdown')
    bot.send_invoice(
        message.chat.id,
        title='–î–æ–Ω–∞—Ç–∏–∫ –±—Ä–∞—Ç—é–Ω—è–º',
        description='–û–ø–ª–∞—Ç–∞ –±—Ä–∞—Ç—é–Ω—è–º',
        provider_token=pay_token,
        invoice_payload='–û–ø–ª–∞—Ç–∞ –±—Ä–∞—Ç—é–Ω—è–º',
        currency='rub',
        prices=[price],
        photo_url='https://mirpozitiva.ru/wp-content/uploads/2019/11/1542866820_0019.jpg',
        photo_height=512,
        photo_width=512,
        photo_size=512,
        is_flexible=False,  # True If you need to set up Shipping Fee
        start_parameter='test-invoice-payload')
